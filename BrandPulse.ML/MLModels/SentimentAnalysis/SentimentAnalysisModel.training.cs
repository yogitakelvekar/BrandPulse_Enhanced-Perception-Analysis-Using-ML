﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace BrandPulse_API
{
    public partial class SentimentAnalysisModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"NO_QUERY", @"NO_QUERY", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(@"1467810369", @"1467810369"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Mon Apr 06 22:19:45 PDT 2009",outputColumnName:@"Mon Apr 06 22:19:45 PDT 2009"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"_TheSpecialOne_",outputColumnName:@"_TheSpecialOne_"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"@switchfoot http://twitpic.com/2y1zl - Awww, that's a bummer.  You shoulda got David Carr of Third Day to do it. ;D",outputColumnName:@"@switchfoot http://twitpic.com/2y1zl - Awww, that's a bummer.  You shoulda got David Carr of Third Day to do it. ;D"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"NO_QUERY",@"1467810369",@"Mon Apr 06 22:19:45 PDT 2009",@"_TheSpecialOne_",@"@switchfoot http://twitpic.com/2y1zl - Awww, that's a bummer.  You shoulda got David Carr of Third Day to do it. ;D"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"0",inputColumnName:@"0"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(new LbfgsMaximumEntropyMulticlassTrainer.Options(){L1Regularization=0.03125F,L2Regularization=0.07201746F,LabelColumnName=@"0",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
